# Python script to run Federated Learning


# 1. Load pickle file embeddings
# 2. Load initial weight
# 3. Communicate with arduino


import pickle
import serial
import syslog
import time


def image_data_to_string(single_image_data):
	# Processes a single image
	# Returns embedding, ground truth as strings 
	embedding = single_image_data['embedding'].tolist()[0]
	embedding_str = ",".join(map(str, embedding))
	ground_truth_str = ",".join(map(str, single_image_data['ground_truth']))
	return embedding_str, ground_truth_str

def generate_batched_data(image_data, batched_num=5):
	# Returns a list of batched data, where each element is an array of two strings (binary encoded)

	batched_data_lst = []
	image_counter = 0
	while image_counter < len(image_data) - batched_num:
		single_batch_lst = ['','']
		for i in range(batched_num):
			embedding, ground_truth = image_data_to_string(image_data[image_counter])
			image_counter += 1
			single_batch_lst[0] = single_batch_lst[0] + ';' + embedding
			single_batch_lst[1] = single_batch_lst[1] + ';' + ground_truth
		single_batch_lst[0] = single_batch_lst[0].encode()
		single_batch_lst[1] = single_batch_lst[1].encode()
		batched_data_lst.append(single_batch_lst)
	return batched_data_lst


def main():
	# Data
	masked_data = pickle.load(open('../../dl/pickle_masked_processed_color_1209.p', 'rb'))
	unmasked_data = pickle.load(open('../../dl/pickle_unmasked_processed_color_1209.p', 'rb'))
	# train_masked = masked_data[:5]
	# train_unmasked = unmasked_data[:5]
	masked_batched = generate_batched_data(masked_data, batched_num=5)
	print(masked_batched[0])

	# Setup connection to Arduino
	port = '/dev/cu.usbmodem142101' # change this to what the Arduino Port is
	ard = serial.Serial(port,9600,timeout=5)
	time.sleep(5) # wait for Arduino

	# For one round
	i = 0
	while (i < 1):
	    # Serial write section
	    ard.flush()

	    # Get embedding and ground truth
		embeddings, ground_truths = masked_batched[0]

		# Send embedding
	    ard.write(embeddings)
	    print("Mac: sent embedding")
	    time.sleep(2) 

	    # Serial read section
	    msg = ard.read(ard.inWaiting()) # read all characters in buffer
	    print(f"Mac: received {msg}")
	    # print (f"Mac: received {msg.decode('utf-8')}")

	    # Send ground truth
	    ard.write(image_gt)


	    i = i + 1
	else:
	    print ("Exiting")
	exit()


if __name__ == "__main__":
    main()